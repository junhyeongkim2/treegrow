version: "3"
services:
  node:
    container_name: backendnest
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    expose:
      - "3000"
    links:
      - mysql
    depends_on:
      - mysql
      - redis-server
    networks:
      - febnine-net
      - elk

  mysql:
    container_name: mysql
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: treegrow
      MYSQL_USER: junhyeong
      MYSQL_PASSWORD: password
    expose:
      - "3306"
    networks:
      - febnine-net
      - elk

  redis-server:
    image: redis:latest
    container_name: redis-server
    hostname: redis-server
    ports:
      - "6379:6379"
    networks:
      - febnine-net
      - elk

  elasticsearch:
    hostname: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - febnine-net
      - elk

  logstash:
    hostname: logstash
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5001:5001/tcp"
      - "5044:5044/tcp"
      - "5001:5001/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - febnine-net
      - elk

    depends_on:
      - elasticsearch

  kibana:
    hostname: kibana
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - febnine-net
      - elk

    depends_on:
      - elasticsearch

  filebeat:
    image: docker-logs-elk/filebeat:1.0.0
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      # needed to access all docker logs (read only) :
      - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
      # needed to access additional informations about containers
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - elasticsearch
      - logstash
    networks:
      - febnine-net
      - elk

networks:
  febnine-net:
  elk:
    driver: bridge

volumes:
  elasticsearch:
